name: Docker Build and Publish

on:
  release:
    types: [published, prereleased]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check
        run: |
          if [ "${{ github.event_name }}" != "schedule" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          last_week=$(date -d "7 days ago" +%s)
          last_commit=$(git log -1 --format=%ct)
          if [ $last_commit -gt $last_week ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  docker-test:
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: needs.check-changes.outputs.should_run == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          cp app/config/local.py.example app/config/local.py

      - name: Build and test backend image
        run: |
          docker compose -f docker-compose.backend.yaml build
          docker compose -f docker-compose.backend.yaml up -d
          sleep 30  # Give time for services to start
          curl -f http://localhost:5001/health || exit 1
          docker compose -f docker-compose.backend.yaml logs
          docker compose -f docker-compose.backend.yaml down

  security-scan:
    runs-on: ubuntu-latest
    needs: [docker-test]
    if: needs.check-changes.outputs.should_run == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build image for scanning
        run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: |
      github.event_name == 'release' ||
      (github.event_name == 'schedule' && needs.check-changes.outputs.should_run == 'true')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Weekly latest tag
            type=raw,value=latest,enable=${{ github.event_name == 'schedule' }}
            # Version tags for releases
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            # Stable tag for published releases
            type=raw,value=stable,enable=${{ github.event_name == 'release' && !github.event.release.prerelease }}
            # Edge tag for pre-releases
            type=raw,value=edge,enable=${{ github.event_name == 'release' && github.event.release.prerelease }}

      # Build and push backend-only image (default)
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push backend with temporary ngrok
      - name: Build and push backend with temp ngrok
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}-ngrok-temp
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-ngrok-temp
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push backend with static ngrok
      - name: Build and push backend with static ngrok
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}-ngrok-static
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-ngrok-static
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 