name: Docker Build and Publish

on:
  workflow_dispatch:  # Allows manual triggering
  push:
    branches: [ "main" ]  # Build on every push to main
  release:
    types: [released]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up test environment
        run: |
          cp app/config/local.py.example app/config/local.py
          cp .env.example .env
          # Create necessary directories
          mkdir -p downloads cache logs
          mkdir -p cache/stib cache/delijn
          chmod -R 777 downloads cache logs

      - name: Build and test backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: brussels_transit-web:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run tests
        run: |
          # Create test environment files
          cp app/config/local.py.example app/config/local.py
          cp .env.example .env
          
          # Run the tests with the environment file
          docker compose --env-file .env -f docker-compose.backend.yaml up -d
          sleep 120  # Give time for services to start
          curl -f http://localhost:5001/health || exit 1
          docker compose -f docker-compose.backend.yaml logs
          docker compose -f docker-compose.backend.yaml down

  security-scan:
    runs-on: ubuntu-latest
    needs: [docker-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: |
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Development tag for pushes to main and manual triggers
            type=raw,value=edge,enable=${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
            # Version tags for releases
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            # Stable tag for published releases
            type=raw,value=stable,enable=${{ github.event_name == 'release' && !github.event.release.prerelease }}
            # Latest tag follows stable for releases
            type=raw,value=latest,enable=${{ github.event_name == 'release' && !github.event.release.prerelease }}

      # Build and push image
      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 